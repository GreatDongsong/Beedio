/*
 *     LM videodownloader is a browser app for android, made to easily
 *     download videos.
 *     Copyright (C) 2018 Loremar Marabillas
 *
 *     This program is free software; you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation; either version 2 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License along
 *     with this program; if not, write to the Free Software Foundation, Inc.,
 *     51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

apply plugin: 'com.android.application'

android {
    signingConfigs {
        release
    }
    compileSdkVersion 28
    buildToolsVersion "28.0.3"
    defaultConfig {
        applicationId "marabillas.loremar.lmvideodownloader"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 3
        versionName "1.1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 
                    'proguard-rules.pro'
            signingConfig signingConfigs.release

            if (project.hasProperty("AndroidProject.signing")
                    && new File(project.property("AndroidProject.signing").toString()).exists()) {
                def Properties props = new Properties()
                def propFile = new File(project.property("AndroidProject.signing").toString())
                if(propFile.canRead()) {
                    props.load(new FileInputStream(propFile))
                    if (props!=null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
                        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
                        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
                        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
                        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
                    } else {
                        println 'androidproject.properties found but some entries are missing'
                        android.buildTypes.release.signingConfig = null
                    }
                } else {
                    println 'androidproject.properties file not found'
                    android.buildTypes.release.signingConfig = null
                }
            }
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'org.jetbrains:annotations-java5:19.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'

    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test:core:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
